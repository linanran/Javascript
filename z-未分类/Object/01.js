/*
是所有对象的基类
属性和方法
connstructor属性
isPrototypeOf()
isPrototypeOf())
propertyIsEnmerabble
toLocaleString
valueOf

静态方法
Object.assign()
通过复制一个或多个对象来创建一个新的对象。
Object.create()
使用指定的原型对象和属性创建一个新对象。
Object.defineProperty()
给对象添加一个属性并指定该属性的配置。
Object.defineProperties()
给对象添加多个属性并分别指定它们的配置。
Object.entries()
返回给定对象本人可列举的属性清单[key, value]。
Object.freeze()
瞬间对象：其他代码不能删除或更改任何属性。
Object.getOwnPropertyDescriptor()
返回对象指定的属性配置。
Object.getOwnPropertyNames()
返回一个目录，它包含了指定对象所有的可枚举或不可枚举的属性名。
Object.getOwnPropertySymbols()
返回一个目录，它包含了指定对象自身的所有标志属性。
Object.getPrototypeOf()
返回指定对象的原型对象。
Object.is()
比较两个值是否相同。所有NaN值都和==不同）。
Object.isExtensible()
判断对象是否可以扩展。
Object.isFrozen()
判断对象是否已经冻结。
Object.isSealed()
判断对象是否已经密封。
Object.keys()
返回一个包含所有给定对象的个人可列出属性名称的目录。
Object.preventExtensions()
阻止对象的任何扩展。
Object.seal()
其他代码删除对象的属性阻止。
Object.setPrototypeOf()
设置对象的原型（即内部[[Prototype]]属性）。
Object.values()
返回给定对象本人可枚举值的清单。
实例属性
Object.prototype.constructor
一个引用值，指向对象构造函数
Object.prototype.__proto__
一个对象，当一个实例化时，使用该对象作为实例化对象的原型
实例方法
Object.prototype.__defineGetter__()
将一个属性与一个函数相关联，当该属性被访问时，执行该函数，并返回函数的返回值。
Object.prototype.__defineSetter__()
将属性相关联，当一个被设置时，执行该函数，执行该函数去修改该属性与该属性。
Object.prototype.__lookupGetter__()
返回一个函数，该函数通过给定属性的Object.prototype.__defineGetter__()结果。
Object.prototype.__lookupSetter__()
返回一个函数，该函数通过给定属性的Object.prototype.__defineSetter__()结果。
Object.prototype.hasOwnProperty()
返回一个值，用于表示对象本身是否包含指定的属性，该方法并不会发现一个原型链上继承来的属性。
Object.prototype.isPrototypeOf()
返回一个布尔值，用于表示该方法所调用的对象是否在指定对象的原型链中。
Object.prototype.propertyIsEnumerable()
返回一个布尔值，用于表示内部属性ECMAScript [[Enumerable]] 属性是否被设置。
Object.prototype.toLocaleString()
调用toString()。
Object.prototype.toString()
返回一个代表该对象的字符串。
Object.prototype.valueOf()
返回指定对象的原始值。
 */
let c=new Map();
c.set('a',1);
console.log(Object);
