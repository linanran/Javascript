js是基于对象的语言
基于对象的定义：“语言和宿主的基础设施由对象来提供，并且 JavaScript 程序即是一系列互相通讯的对象集合”

1，怎么判断是否为对象？

typeof 结果为object的都是引用类型，都是对象，都是属性和值的集合。

结果发现函数、数组、对象、null、基本类型包装对象 都是对象。其他的属于undefined、number、string、boolean

2,函数与对象

[函数与对象](https://www.notion.so/114b40fe2a364665b922f9e210cf4d95)

JavaScript包含的对象类型：

1，ECMScrip内置对象

array、booleam、date、math、number、string、RegExp、全局属性与函数

2，browser对象-浏览器对象-Bom

window（浏览器窗口等）、Navigator（浏览器信息）、Screen（客户端显示屏幕的信息）、History（浏览器历史访问记录）、Location（当前url信息）

3，Dom对象-html文档根节点的Dom形式

document对象-操作元素

元素对象-代表一个元素

属性对象-Attr

事件对象

console对象

CSSStyleDeclaration对象

HTMLCollection对象

4，HTML对象

分类：

内建对象-Array

宿主对象-浏览器对象

除了内建对象，还可以在js脚本里使用一些已经预定义好的其他对象，这些对象不是由js语言本身而是由它的运行环境提供，由浏览器提供的预定义对象被成为宿主对象，包括Form，Image和Element

1，对象及分类

1，对象

面向对象的语言都有一个标志，就是它们都有类的概念，而通过类以创建任意多个具有相同属性和方法的对象。JS没有类概念。

ECMA-262把对象定义为：无序属性的集合，其属性可以包含基本值、对象或函数。一组没有特定顺序的值。

ECMAScript有两种属性：数据属性和访问器属性

数据属性包含一个数据值的位置，在这个位置可以读取和写入值

数据（变量）有：是否可修改删除属性，可循环属性，值属性

通过Object.defineProperty(对象，属性，属性值)；方法修改数据属性

访问器属性包含两个函数：getter函数和setter函数，也是通过Object.defineProperty来定义

1，对象数据属性：

value：对象的值也就是value特性

writable：对象的属性是否只读

emumerable：是否能for in循环返回属性

configurable：是否能够del删除从而重新定义属性

以上都有默认值false。

修改默认特性：

Object.defineProperty：属性所在的对象、属性的名字和一个描述符对象，其中描述符对象的属性必须是上面四个特性上设置一个或多个。

2，访问器属性

Get：再读取属性时调用的函数

Set：在写入属性时调用的函数

Enumerable：能否通过for-in循环返回属性

Configurable：表示能否通过del删除属性从而定义属性

必须通过Object.defineProperty来定义，在不支持Object defineProperty方法的浏览器中不能修改后两种特性

3，定义多个属性

Object.defineProperties方法可以通过描述符一次定义多个属性

两个对象参数：要设置对象，对象参数对象（多个属性，每个包含属性名以及要设置的第一节中的四个特性）

4，读取属性的特性

Object.getOwnPropertyDescriptor方法，可以取得给定属性的描述符，这个方法接收两个参数，属性所在的对象和要读取其描述符的属性名称。返回值是一个对象。

2，创建对象

1，工厂模式-创建多个相似的对象

用一个方法充当工厂，返回对象。

2，构造函数模式

任何函数，只要通过new操作符调用，那它就可以作为构造函数。

使用构造函数每个方法都在每个实例上重新创建了一遍，通过把函数定义转移到构造函数外部来解决这个问题

3，原型模式：

创建的每个函数都有一个prototype属性，这个属性 是个指针，指向一个对象，可以通过这个属性定义属性以及函数，新对象具有相同的属性和方法。和构造函数模式不同的是，新对象的这些属性和方法是由所有实例共享的。

1，理解原型对象

略

2，原型和in操作符，单独使用和for-in循环中使用，in操作符会在通过对象能够访问给定属性时返回true，无论该属性存在于实例中还是原型中。同时使用hasOwnProperty方法和in操作符，就可以确定属性到底时存在于对象中还是原型中，前者存在于实例中返回为true

再使用for-in循环时，返回的时所有能够通过对象访问的、可枚举的属性，其中既包括存在于实例中的属性，也包括存在于原型中的属性

ECMAScript5的Object.keys方法，剋取得对象上所有可枚举的实例属性，返回一个包含所有可枚举属性的字符串数组

参数为实例或原型的prototype值

Obect.getOwnPropertyNames可以得到所有实例属性，无论它是否可以枚举。

4，更简单的原型语法

用一个包含所有属性和方法的对象字面量来重写整个原型的对象

Person.prototype={

name:"name",

sayName:function(){}

}

constructor属性不再指向person了，如果需要则手动设置它的值

5，原型的动态性

对原型对象所作的任何修改都能立即从实例中反应过来

调用构造函数时会为实例添加一个执行最初原型的【Prototype】指针，而把原型修改为另一个对象就相当于切断了构造函数于最初模型之间的联系-重要

6，原生对象的原型

不推荐再产品化的程序中修改原生对象的原型

7，原型对象的问题

所有实例默认情况下都取相同的属性值

包含引用类型的值：某个实例修改了引用类型的值，后面的实例相应的值也会被改变，且多个实例中的引用对象为同一对象

8，组合使用构造函数模式和原型模式

function Person(name){

this.name=name;

this.friends=["a","b"];

}

Person.prototype={

constructor:Person,

sayName:function(){

console.log(this.name);

}

}

所有实例属性都再构造函数中定义，而所有实例共享的属性constructor和方法sayName则在原型中定义，因此修改friends并不会影响到其他。

这是用来定义引用类型的默认模式。

9，动态原型模式

function Person(name){

this.name="name";

if(type this.sayName!="function"){

Person.prototype.sayName=function(){}

}

}

10,寄生构造函数模式

创建一个函数，该函数的作用仅仅时封装创建对象的代码，然后再返回新创建的对象

这个模式可以对JS的原生对象进行扩展，既包含原生对象的内容，又可以通过对象调用扩展的内容

11，稳妥构造函数模式

稳妥是指没有公共属性，方法也不应用this的对象

3，继承

只支持实现继承

1，原型链

基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。

继承是通过创建SuperType的实例，并将该实例赋给SubType.prototype实现的

本质上扩展了原型搜索机智：当以读取模式访问一个实例属性是，首先会再实例中搜索该属性，如果没有找到该属性，则会继续搜索实例的原型。

2，确定原型和实例的关系

第一种是instanceof操作符，来测试实例于原型链中出现过的构造函数

第二种方式 isPrototypeOf 同instanceof

3，谨慎地定义方法

给原型添加方法地代码一定要放到替换原型地语句之后

重写超类型中的方法，给子类添加一个相同函数名的方法即会覆盖超类的方法

不能使用对象字面量创建原型方法，即给proptotype重新赋值

4，原型链的问题

第一个问题，和引用类型值作为原型属性会被所有实例共享的问题相同。超类的引用类型会被所有子类实例所共享

这里只需要搞清楚一点：所有在prototype中（原型中）的内容会被共享，而在函数中的内容（构造函数中定义）每个实例都属于它自己的。

而这里情况却不完全相同，父类引用类型定义在构造函数中，当子类通过原型链继承父类后，子类的prototype就存在了父类的一个实例，即prototype中的某一空间指向了父类。因此子类的所有实例都回共享父类的这一属性

第二个问题是创建子类时，不能向超类传递参数，（在不影响所有独享实例的情况下给超类构造函数传递参数）

因为以上问题在实践中很少会单独使用原型链

原型链案例：

functionSuperType(){

this.prototype=true;

}

SuperType.prototype.getSuperValue=function(){

returnthis.property;

}

functionSubType(){

this.subProperty=false;

}

SubType.prototype=newSuperType();

SubType.prototype.getSubValue=function(){

returnthis.subProperty;

}

varinstance=newSubType();

alert(instance.getSuperValue())

5,借用构造函数

在子类型构造函数得内部调用超类型构造函数：使用call

这样每个实例都有自己得属性得副本了

可以在子类型构造函数中向超类型构造函数传递参数

6，组合继承

使用原型链实现对原型属性和方法的继承，通过借用构造函数来实现对实例属性的继承

functionSuperType(name){

this.name=name;

this.colors=['red','blue','green'];

}

SuperType.prototype.sayName=function(){

alert(this.name);

}

functionSubType(name,age){

//继承属性

SuperType.call(this,name);

this.age=age;

}

//继承方法

SubType.prototype=new SuperType();

SubType.prototype.Constructor = SubType;

SubType.prototype.sayAge = function(){

alert(this.age);

}

var instancel=new SubType("Nicholas",29);

instancel.colors.push("black");

alert(instancel.colors);//'red','blue','green','black'

instancel.sayName();//Nicholas

instancel.sayAge();//29

var instance2 = new SubType("Greg",27);

alert(instance2.colors);//'red','blue','green',

instance2.sayName();//Greg

instance2.sayAge();//27

7，原型式继承

借助原型可以基于已有的对象创建新对象，同时还不必因此创建自定义类型。

function object(o){

function F(){}

F.prototype=o;

return new F();

}

var person={

name:"Nicholas",

friends:["Shelby","Court","Van"]

};

var anotherPerson=object(person);

anotherPerson.name="Greg";

anotherPerson.friends.push("Rob");

var anotherPerson2=object(person);

anotherPerson2.name="Linda";

anotherPerson2.friends.push("Barbie");

alert(person.friends);

Shelby,Court,Van,Rob,Barbie

ECMAScript5新增了Object.create方法规范了原型式继承，上面的object(person)可以用Object.create(person)代替，object可以不要

一这种方式指定的任何属性都回覆盖原来的属性

8，寄生式继承

在原型式继承的基础上加上工厂模式

function createAnthother(or){

var clone = object(or);

clone.sayHi = function(){

alert('hi');

};

return clone;

}

对象不仅又person的所有属性和方法，还有自己的sayHi方法

9，寄生式组合继承

组合继承式最常用的继承模式：无论什么情况下，都回调用两次超类型构造函数，一次是在创建子类型原型的时候，另一个在子类型构造函数内部

子类型最终会包含超类型对象的全部实例属性，但我们不得不在调用子类型构造函数时重写这些属性。

寄生式组合继承时为了解决调用两次构造函数产生的两组属性（一组在实例上，一组在原型中），通过借构造函数来继承，通过原型链的混合形式来继承方法，其基本思想时，不必为了指定子类型的原型儿调用超类型的构造函数

略：整章重看整理

4，函数表达式

函数表达式

函数表达式与函数声明

函数声明提升（提前）

匿名函数

递归函数可能出现的错误以及两种解决办法

闭包：理解闭包

2，Bom

windows对象

location对象

navigator对象：得到浏览器相关信息

检测插件

注册处理程序

screen对象：浏览器窗口外部的显示器信息

history对象：上网的

3，Dom：式针对html和xml文档的一个API（应用程序接口），dom描绘了一个层次化的节点书，允许开发人员添加、移除和修改页面的某一部分

一、节点层次

1，节点层次：每个节点的属性及操作

Node类型：JS中的所有节点类型都继承自Node类型，除IE以外所有浏览器都可以访问这个类型，所有节点都共享着相同的基本属性和方法

type，name，value：

nodeType：节点类型，是否为一个元素

nodeName：取决于节点类型，元素名

nodeValue：始终未null

节点关系

childNodes属性

parentNode属性

previousSibing和nextSibing属性：同一列表的其他节点

firstChild和lastChild属性

childNodes属性和hasChildNodes属性

ownerDocument：整个文档的文档节点

操作节点

appendChild

insertBefore

replaceChild

removeChild

其他：

cloneNode：传入布尔值，是否深度复制

normalize方法：处理文档树中的文本节点。在后代节点中查找空文本节点并删除，如果找到相邻文本节点，就将它合并

2，document类型

document对象式HTMLDocument（继承自Document类型）的一个实例，表示整个页面，document独享式window对象的一个属性，因此可以将其作为全局对象来访问

html节点的引用：document.documentElement、

body节点：document.body

<!DOCTYPE>的引用：document.doctype（浏览器对其的支持差别很大）

不同浏览器在解析注释上也存在差异：

设置/取得页面标题：document.title

完整的url：document.URL

域名：document.domain

源页面的URL:document.referrer

查找元素：

getElementById

getElementByTagName,返回一个HTMLCollection 对象，该对象包含

namedItem属性,可以通过元素的name特性取得集合中的项

images.namedItem("nameValue")/images["nameValue"]

在IE中，getElementByTagName("*"):返回所有注释

getElementByName

其他：

document.anchors：带有name属性的a元素

document.forms

document.images

document.lins

文档写入

write

writeln

open

close

3，Element类型

document和element的区别：document表示文档，element表示节点

element节点的特征：

nodeType为1

nodeName的值为元素的标签名，tageName值相同

nodeValue的值为null

parentNode可能式document或Element

其子节点可能是：Elment、text、comment、processingInstruction、CADATASection或EntityReference

在html中标签名始终都以大写表示

elemtn.tageName.toLowerCase()=="div"

1，html元素，所有html元素都由HTMLElement类型表示，每个html元素都包含以下属性

id

title

lang

dir

className

2，取得特性和设置特性

getAttribute setAttribut

3，attribute属性：不常用

4，创建元素

createElement

添加刀文档树中：appendChild insertBefore
replaceChild

可以传入包含属性的完整元素标签字符串，这种方式可以避开IE7及之前的版本所产生的一些问题。建议只在避开IE版本下使用

5，元素的子节点

不同浏览器处理不同，部分浏览器会将空格作为子元素，建议加上元素类型判断，nodeType是否为

4，text类型

text节点包含以下特征

nodeType为3

nodeName的值为#text

nodeValue的值为节点所包含的文本

操作

appendData

deleteData

insertData

replaceData

splitText

substringData

length值

1，创建文本节点

createTextNode

2，规范文本节点

将相邻文本节点合并：normalize

3，分割文本节点

splictText

5，Comment类型-注释

特征

nodeType为8

nodeName值为#comment

于text类型继承相同的基类，拥有除了splitText外的所有方法

6，CDATASection类型-值针对于xml文档

7，元素的特性在DOM中以Attr类型来表示

特征

nodeType值为2

二，dom操作技术

1，动态脚本-创建script标签

document.body.appendChild

2，动态样式-创建link标签

添加到head中，得到head标签，apendChild到head中

3，操作表格

HTMLDom为了了更简单的操作表格，增加了一些属性和方法：略，以减少所需代码

4，使用NodeList

以及NamedMap，HTMLCollection。这三个集合都是动态的，每当结构发生变化时，它们都会得到更新

4，Dom扩展

1，选择符API

querySelector方法接收一个css选择符，返回该模式匹配的第一个元素

querySelectorAll，返回匹配的所有元素

能够调用的类型包括：Document，DocumentFragment，Element，如果浏览器不支持选择符方法会抛出错误。

matchesSelector，如果调用元素与该选择符匹配，返回true

2，元素遍历：使用childNodes和firstChild属性不一致而定义的一组新属性

childElementCount、firstElementChild，lastElementChild、previousElementSibling，nextElementSibling

3，html5

1，与类相关的扩充，用于简化css类的用法

getElementsByClassName，传入多个类名

5，Dom2和Dom3
