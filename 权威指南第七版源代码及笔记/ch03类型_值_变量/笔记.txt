第三章笔记：类型、值和变量
1，js类型：原始类型和对象
    原始类型：数值、文本、布尔值
    特殊原始类型：null、undefined
    非上述五种类型即对象：属性的集合
    数据结构对象：数组、set、map
    特殊对象：函数和类
        js和静态语言的更大差别在于，函数和类不仅仅是语言的语法，他们本身就是可以被js程序操作的值
        在js中只有null和undefined不能调用方法
    原始类型不可被修改，对象是可以被修改的
2，js类型转换
3，相等操作
    ==已被弃用，二用===
4，常量和变量
    const、let
5，数值
    数值字面量
    Number
    整数字面量：
        Ox：十六进制
        Ob：二进制
        Oo：八进制
    浮点字面量
        次幂表示法 10.34E32  10.34乘以10的32次方
    数值字面量分隔符
        1_000_000
6,算数
    **：取幂
    Math对象：略
    特殊值1：Infinity、-Infinity；超过数值范围的值，这两个值并不相等
    特殊值2：NaN，在算数运算符中出现不能转换为数值的值时结果就为NaN
7，二进制浮点数与舍入错误
    无法表达0.1这么简单的数
8，BigInt表达任意精度整数
    用法：n跟在数字后面
    Math方法无法接收BigInt类型
9，日期和事件
    Date对象：略
10，文本String
    js使用unicode字符集中的UTF-16编码，因此js字符串是无符号16位值的序列，当一个字符超过16就会占用两个位值，数组的长度为2
    因此当String中存在超过值位的数据时，用ES6的迭代器，而非[]
    字符串字面量：单引号、双引号、`（模板字面量）
11，反斜杠\
    ES5，我们可以在行末尾加上反斜杠，从而把一行字符串字面量写到多行上
12，反斜杠的另一个用法：转义序列
    \n:换行
    反斜杠后面跟着非转义序列内容，将会被忽略
13，String
    length属性
    String方法：略
    ES2017新增字符串填充函数 padStart()
14，模板字面量：``
    反引号是ES6新增的特性，这反引号的字符串子面中可以使用插值。
    1，插值${}
        标签化模板字面量
    2,调用方法：start`123`;调用start方法，并传递参数123
    3，标签函数：String.raw();不处理任何反斜杠转义，返回该字符串
15，模式匹配
    正则表达式：一对斜杠之间的文本构成正则表达式字面量
16，布尔值
    判断是返回的只有布尔值
17，null和undefined
    null表示没有对象
    undefined表示未被定义，应当避免使用null，而使用undefined
18，符号：用作非字符串的属性名
    诞生：ES6新增了for of循环和可迭代对象，为此需要定义一种标准的机制让类可以事先，从而把自身变得可迭代。但选择任何特定的字符串
    作为迭代器方法的名字都可能破坏已有的代码，简而言之，符号是为了迭代器这个功能而产生的
    Symbol没有字面量语法，需要调用函数Symbol（），这个函数永远不会返回线相同的值，即使每次传入的参数都一样
    全局符号：
        Symbol.for 注册
        Symbol.keyFor查找注册
19，全局对象
    js启动后都会产生一个新的全局对象，并为其添加一组初始化属性：
    undefined等全局常量
    isNaN等全局函数
    String()构造函数
    Math、JSON全局对象
    ES2020最终定义了globalThis作为在任何上下文中引用全局对象的标准方式
20，对象比较
    两个不同对象即使完全相同的属性和值，他们也不相等
    两个不同的数组即使每个元素相同顺序相同，他们也不相等
    两个指向同一个对象的指针才想通
21，隐式转换与显示转换、Number的方法
    在+、=（赋值）、== 比较等运算符时不同类型的数据会进行转换
    显示转换：Boolean() Number() String()
    Number方法：
    该方法只能处理基数为10的整数！！！不允许末尾出现无关字符
    toString()
    toExponential：指数法转换成字符串
    toFixed：指定小数位数转换为字符串
    toPrecision：按照指定的有效位数转换为字符串
    Intl.NumberFormat定义了更加通用国际化的数值格式转换方法：11.7.1
        parseInt、parseFloat：都是全局函数，不属于任何类
22,包装对象
    new Number()等
    是早起js的历史遗留，没必要使用
23，严格相等操作符
    类型与值是否相等
24，对象到原始值的转换
    js对象到原始转换的复杂性，主要原因在于某些对象属性有不止一种原始值的表示
    比如：Date对象可以用字符串表示，也可以用时间戳表示
    三种算法：
        偏字符串、偏数值、不倾向任何原始值类型，有自己的转换法则
    对象转布尔：
        true
    对象转字符串：
        偏字符串算法
    对象转数值：
        偏数值
    其他：
        操作符转换
    toString和toValue方法，在上述的三种算法前都必须先解释这两个方法
    toString默认都不会返回特别的值
    valueOf：默认只返回对象，不返回原始值，包装类定义的valueOf方法知识简单的返回包装的原始值，Date对象返回毫秒数
    对象到原始值的转换算法：略，见86页
25，变量声明与赋值
    let、const
26，作用域
    let和const有最小的作用域，for、while、if-else
    在同一个作用域类使用let或const重复申明同一变量名是语法错误
27，声明与类型
    同一个变量，可以重新赋值为不同的类型
28，var
    1，作用域：var不具有块级作用域，只有函数作用域
    2，在函数外定义的变量属于全局对象的属性，可以通过globalThis引用；但不能使用delete操作符（疑惑点，见4.13.4章节）
    3，多次定义同名变量时合法的
    4，作用域提升，声明会提升到函数的顶部，初始化不会被提升。let不会。
    5，在非严格模式下，讲一个值赋给一个未使用的变量，前面没有let、const、var。无论这个赋值语句被嵌套了多少次。
        则该变量为全局变量。但在严格模式下，会报错。这种变量是可以通过delete删除的。而var定义的全局变量则不可以。
29，解构赋值

